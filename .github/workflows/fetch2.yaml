name: List Environments and Their Secrets

on:
  push:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

jobs:
  list-environments:
    runs-on: ubuntu-latest
    steps:
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: List All Environments
        id: list_environments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO_OWNER: infotechay
          REPO_NAME: gke-cicd
        run: |
          echo "Fetching all environments for repository: ${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}"
          ENVIRONMENTS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
                            -H "Accept: application/vnd.github.v3+json" \
                            "https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/environments" | jq -r '.environments[].name')
          echo "Environments found: $ENVIRONMENTS"
          
          # Save environments to a file for further use
          echo "$ENVIRONMENTS" > environments.txt


      # - name: List Secrets for Each Environment
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     REPO_OWNER: infotechay
      #     REPO_NAME: gke-cicd
      #   run: |
      #     while IFS= read -r ENVIRONMENT; do
      #       echo "Fetching secrets for environment: $ENVIRONMENT"
      #       SECRETS=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
      #                       -H "Accept: application/vnd.github.v3+json" \
      #                       "https://api.github.com/repos/${{ env.REPO_OWNER }}/${{ env.REPO_NAME }}/environments/$ENVIRONMENT/secrets" | jq -r '.secrets[]?.name')
      #       if [ -z "$SECRETS" ]; then
      #         echo "No secrets found for environment: $ENVIRONMENT"
      #       else
      #         echo "Secrets for environment $ENVIRONMENT:"
      #         echo "$SECRETS"
      #       fi
      #     done < environments.txt




      # - name: List Secrets for Each Environment
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     # REPO: ${{ github.repository }}
      #     REPO: vprfile_dev
      #   run: |
      #     echo "Fetching secrets for each environment in repository: $REPO "
      #     for ENVIRONMENT in ${{ steps.list_environments.outputs.environments }}
      #     do
      #       echo "Environment: $ENVIRONMENT"
      #       curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
      #            -H "Accept: application/vnd.github.v3+json" \
      #            "https://api.github.com/repos/infotechay/vprfile_dev/environments/$ENVIRONMENT/secrets" | jq .
      #     done


  # list-environment-secrets1:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: Mysecret1
  #   steps:
  #     - name: List Secrets for Environment
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure the token has sufficient permissions
  #         TARGET_REPO: infotechay/gke-cicd       # Replace with your target repository in owner/repo format
  #         ENVIRONMENT_NAME: mysecret1       # Replace with your target environment name
  #       run: |
  #         echo "Fetching secrets for environment: $ENVIRONMENT_NAME in repository: $TARGET_REPO"

  #         # Fetch the secrets for the specified environment
  #         RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
  #                         -H "Accept: application/vnd.github.v3+json" \
  #                         "https://api.github.com/repos/infotechay/gke-cicd/environments/$ENVIRONMENT_NAME/secrets"  | sed 's/./& /g' >> output.txt)

  #         # echo "API Response: $RESPONSE"
  #         cat output.txt

  #         # # Check if secrets exist and list the secret keys
  #         # echo "$RESPONSE" | jq -e '.secrets | length > 0' > /dev/null 2>&1 || { echo "No secrets found in environment $ENVIRONMENT_NAME"; exit 0; }
  #         # echo "Secrets found:"
  #         # echo "$RESPONSE" | jq -r '.secrets[].name'



  # use-environment-secrets:
  #   runs-on: ubuntu-latest
  #   environment:
  #     name: Mysecret1
    
  #   steps:
  #     - name: Update Secrets in Target Repository
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       run: |
  #         echo "Updating secrets in the target repository"
  #         while IFS='=' read -r SECRET_NAME SECRET_VALUE; do
  #           if [[ -n "$SECRET_NAME" && -n "$SECRET_VALUE" ]]; then
  #             echo "Setting $SECRET_NAME in the target repository"
  #             gh secret set "$SECRET_NAME" --body "$SECRET_VALUE" --repo infotechay/vprfile_dev --env newsecrets
  #           fi
  #         done < secrets.txt

  #     - name: Display File Content
  #       run: |
  #         echo "Contents of secrets.txt:"
  #         cat secrets.txt

